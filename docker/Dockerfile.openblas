# FROM must be called before other ARGS except for ARG BASE_IMAGE
ARG BASE_IMAGE
ARG WEBRTC_IMAGE=open3d-webrtc:abi1

FROM ${WEBRTC_IMAGE} as webrtc
FROM ${BASE_IMAGE}

# For the rest of this Dockerfile
SHELL ["/bin/bash", "-c"]

# Needed for wget
RUN apt-get update && apt-get install -y \
        sudo \
        ca-certificates
RUN sudo update-ca-certificates -f

# Required build args, should be specified in docker_build.sh
ARG CMAKE_VERSION
ARG CCACHE_TAR_NAME
ARG PYTHON_VERSION
ARG DEVELOPER_BUILD
RUN if [ -z "${CMAKE_VERSION}"   ]; then echo "Error: ARG CMAKE_VERSION   not specified."; exit 1; fi \
 && if [ -z "${CCACHE_TAR_NAME}" ]; then echo "Error: ARG CCACHE_TAR_NAME not specified."; exit 1; fi \
 && if [ -z "${PYTHON_VERSION}"  ]; then echo "Error: ARG PYTHON_VERSION  not specified."; exit 1; fi \
 && if [ -z "${DEVELOPER_BUILD}" ]; then echo "Error: ARG DEVELOPER_BUILD not specified."; exit 1; fi

# Prevent interactive inputs when installing packages
ENV DEBIAN_FRONTEND=noninteractive
#ENV TZ=America/Los_Angeles
ENV SUDO=command
ENV HOME="/root"
ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"
ENV LD_PRELOAD="/usr/lib/aarch64-linux-gnu/libgomp.so.1"
ENV LLVM_CONFIG="/usr/bin/llvm-config-9"
#ARG MAKEFLAGS

# Minimal dependencies for running Docker
# wget    : for downloading
# libgl1  : available on Ubuntu ARM desktop by default
# libgomp1: available on Ubuntu ARM desktop by default
# libopenblas-dev: not available on L4T by default
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    libgl1 \
    libgomp1 \
    libopenblas-dev \
 && rm -rf /var/lib/apt/lists/*

# Minimal dependencies for building
RUN apt-get update && apt-get install -y \
    software-properties-common \
    build-essential \
    apt-utils \
    clang-7 \
    git  \
 && rm -rf /var/lib/apt/lists/*

# Use GCC/G++ 9
RUN add-apt-repository ppa:ubuntu-toolchain-r/test -y
RUN apt-get update && \
    apt-get install -y \
    g++-9
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9 --slave /usr/bin/g++ g++ /usr/bin/g++-9

# Use CUDA 10 Toolkit provided by NVidia
# RUN wget -q https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/sbsa/cuda-ubuntu1804.pin
# RUN mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
# RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/sbsa/3bf863cc.pub
# RUN add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/sbsa/ /"
# RUN apt-get update
# RUN apt-get -y install cuda

# Configure nvidia apt repo
RUN apt-key adv --fetch-key https://repo.download.nvidia.com/jetson/jetson-ota-public.asc

# Install CUDA Toolkit
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		  cuda-toolkit-* \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Test CUDA Toolkit Installation
RUN nvcc --version
RUN command -V nvcc
RUN which nvcc

# Install ccache after build-essential (gcc, g++).
# Open3D CMake can detect and use ccache automatically, except for OpenBLAS.
# Setting the /usr/lib/ccache path is necessary to cache OpenBLAS build.
RUN apt-get update && apt-get install -y \
    ccache \
 && rm -rf /var/lib/apt/lists/*
ENV PATH="/usr/lib/ccache:${PATH}"
RUN mkdir -p /usr/lib/ccache \
 && ln -sf $(which ccache) /usr/lib/ccache/gcc \
 && ln -sf $(which ccache) /usr/lib/ccache/g++ \
 && ln -sf $(which ccache) /usr/lib/ccache/clang-7
RUN echo ${PATH} \
 && ls -alh /usr/lib/ccache \
 && echo "gcc=$(which gcc)" \
 && gcc --version \
 && echo "g++=$(which g++)" \
 && g++ --version \
 && echo "clang-7=$(which clang-7)" \
 && clang-7 --version

# Uncomment this line to always fetch the latest ccache
ADD "https://www.random.org/cgi-bin/randbyte?nbytes=10&format=h" skipcache

# Download ccache from GCS bucket
# If it doesn't exist on the cloud, an empty ${CCACHE_DIR} will be created.
# Example directory structure:
# - CCACHE_DIR        = ~/.cache/ccache
# - CCACHE_DIR_NAME   = ccache
# - CCACHE_DIR_PARENT = ~/.cache
RUN CCACHE_DIR=$(ccache -p | grep "cache_dir =" | grep -oE "[^ ]+$") \
 && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \
 && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \
 && mkdir -p ${CCACHE_DIR_PARENT} \
 && cd ${CCACHE_DIR_PARENT} \
 && (wget -q https://storage.googleapis.com/open3d-ci-cache/${CCACHE_TAR_NAME}.tar.gz || true) \
 && if [ -f ${CCACHE_TAR_NAME}.tar.gz ]; then tar -xf ${CCACHE_TAR_NAME}.tar.gz; fi \
 && mkdir -p ${CCACHE_DIR}
RUN ccache -M 10G \
 && ccache -s

# Install Pyenv
# Conda is not reliable on Linux ARM64.
RUN apt-get update -y && apt-get install -y \
    make \
    build-essential \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    wget \
    llvm-9 \
    llvm-9-dev \
    libncurses5-dev \
    libncursesw5-dev \
    xz-utils \
    tk-dev \
    libffi-dev \
    liblzma-dev \
    python-openssl \
    git \
 && rm -rf /var/lib/apt/lists/*
RUN git clone --depth=1 https://github.com/pyenv/pyenv.git /root/.pyenv
ENV PYENV_ROOT="/root/.pyenv"
ENV PATH="${PYENV_ROOT}/bin:${PYENV_ROOT}/shims:${PATH}"

# CMake
# PWD is /, cmake will be installed to /root/${CMAKE_VERSION}/bin/cmake
ENV CMAKE_VER_NUM=v3.22.1
RUN wget -q --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.22.1/${CMAKE_VERSION}.tar.gz \
        && tar -xf ${CMAKE_VERSION}.tar.gz \
        && cp -a -r ${CMAKE_VERSION} ${HOME}
ENV PATH=${HOME}/${CMAKE_VERSION}/bin:${PATH}
RUN cmake --version

# Add ISPC support
# ISPC Compiler
RUN mkdir -p /usr/local/ispc/bin
WORKDIR /usr/local/ispc/bin
RUN wget -q https://github.com/realitymatrix/ispc/releases/download/no_version/ispc
RUN chmod 755 ispc
ENV PATH=/usr/local/ispc/bin:${PATH}
RUN ispc --support-matrix

# Open3D C++ dependencies
# Done before copying the full Open3D directory for better Docker caching
COPY ./util/install_deps_ubuntu.sh /root/Open3D/util/
RUN /root/Open3D/util/install_deps_ubuntu.sh assume-yes \
 && rm -rf /var/lib/apt/lists/*

# Open3D repo
# Always keep /root/Open3D as the WORKDIR
COPY . /root/Open3D
WORKDIR /root/Open3D

# WebRTC package
# Use pre-build WebRTC binaries
COPY --from=webrtc /webrtc_bf2a70a_linux_cxx-abi-1.tar.gz /root/Open3D/3rdparty_downloads/webrtc/

# No virtual environment is needed, default to python 3.6
RUN apt-get update && apt-get install -y \
    python3 \
    python3-dev \
    python3-pip \
    python3-tornado \
    python3-setuptools \
 && rm -rf /var/lib/apt/lists/*
RUN ln -s /usr/bin/python3 /usr/local/bin/python \
 && ln -s /usr/bin/python3-config /usr/local/bin/python-config \
 && ln -s /usr/bin/pip3 /usr/local/bin/pip

# Build Python wheel
RUN pyenv install $(pyenv install --list | sort -r --version-sort | grep -m1 "^ *${PYTHON_VERSION}\.")
RUN pyenv local $(pyenv versions | grep ${PYTHON_VERSION})
RUN which python \
 && python --version \
 && python -m pip install -U \
    pip=="21.3.1" \
    wheel=="0.35.1" \
    setuptools=="59.5.0" \
    yapf=="0.30.0" \
    pytest=="6.0.1"

# install jupyter build requirements
RUN python -m pip install -r python/requirements_jupyter_build.txt

# install node
RUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash - && \
    apt-get update && \
    apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    node --version

# install npm
RUN npm install --location=global \
    yarn \
 && yarn --version

# Build Variables
ENV USE_BLAS=ON
ENV CMAKE_BUILD_TYPE=Release
ENV BUILD_UNIT_TESTS=OFF
ENV BUILD_EXAMPLES=ON
ENV BUILD_SHARED_LIBS=ON
ENV BUILD_GUI=ON
ENV BUILD_WEBRTC=ON
ENV BUILD_WEBRTC_FROM_SOURCE=OFF
ENV CMAKE_C_COMPILER=gcc
ENV CMAKE_CXX_COMPILER=g++
ENV USE_SYSTEM_JPEG=ON
ENV BUILD_CUDA_MODULE=ON
ENV BUILD_COMMON_CUDA_ARCHS=ON
ENV CMAKE_CUDA_COMPILER="/usr/local/cuda/bin/nvcc"
ENV BUILD_ISPC_MODULE=ON
ENV CMAKE_ISPC_COMPILER="/usr/local/ispc/bin/ispc"
ENV GLIBCXX_USE_CXX11_ABI=ON
ENV BUILD_FILAMENT_FROM_SOURCE=ON
ENV BUILD_JUPYTER_EXTENSION=ON
ENV BUILD_PYTHON_MODULE=ON
ENV CMAKE_INSTALL_PREFIX="~/open3d_install"

#-DBUILD_TENSORFLOW_OPS=ON \
#-DBUILD_PYTORCH_OPS=ON \
#-DOPEN3D_ML_ROOT=${OPEN3D_ML_ROOT} \
#-DBUNDLE_OPEN3D_ML=ON \
#-DBUILD_LIBREALSENSE=ON \

# build open3d with GPU
RUN mkdir build \
 && cd build \
 && cmake \
    -DUSE_BLAS=${USE_BLAS} \
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
    -DBUILD_UNIT_TESTS=${BUILD_UNIT_TESTS} \
    -DBUILD_EXAMPLES=${BUILD_EXAMPLES} \
    -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} \
    -DBUILD_GUI=${BUILD_GUI} \
    -DBUILD_WEBRTC=${BUILD_WEBRTC} \
    -DBUILD_WEBRTC_FROM_SOURCE=${BUILD_WEBRTC_FROM_SOURCE} \
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} \
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} \
    -DUSE_SYSTEM_JPEG=${USE_SYSTEM_JPEG} \
    -DBUILD_CUDA_MODULE=${BUILD_CUDA_MODULE} \
    -DBUILD_COMMON_CUDA_ARCHS=${BUILD_COMMON_CUDA_ARCHS} \
    -DCMAKE_CUDA_COMPILER:PATH=/usr/local/cuda/bin/nvcc \
    -DBUILD_ISPC_MODULE=${BUILD_ISPC_MODULE} \
    -DCMAKE_ISPC_COMPILER:PATH=/usr/local/ispc/bin/ispc \
    -DGLIBCXX_USE_CXX11_ABI=${GLIBCXX_USE_CXX11_ABI} \
    -DBUILD_FILAMENT_FROM_SOURCE=${BUILD_FILAMENT_FROM_SOURCE} \
    #-DBUILD_TENSORFLOW_OPS=ON \
    #-DBUILD_PYTORCH_OPS=ON \
    #-DOPEN3D_ML_ROOT=${OPEN3D_ML_ROOT} \
    #-DBUNDLE_OPEN3D_ML=ON \
    -DBUILD_JUPYTER_EXTENSION=${BUILD_JUPYTER_EXTENSION} \
    -DBUILD_PYTHON_MODULE=${BUILD_PYTHON_MODULE} \
    #-DBUILD_LIBREALSENSE=ON \
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
    .. \
 && make -j$(nproc) \
# RUN rm -r /root/Open3D/build/bin \
#  && rm -r /root/Open3D/build/lib/Release/*.a \
#  && ls /root/Open3D/build/lib \
#  && rm -r /root/Open3D/build/lib/_build_config.py.in \
#  && rm -r /root/Open3D/build/cpp
# && rm -r /root/Open3D/build/lib/ml
# build with GPU enabled
# WORKDIR /root/Open3D/build
# RUN cmake \
#     -DUSE_BLAS=ON \
#     -DCMAKE_BUILD_TYPE=Release \
#     -DBUILD_UNIT_TESTS=OFF \
#     -DBUILD_EXAMPLES=ON \
#     -DBUILD_SHARED_LIBS=ON \
#     -DBUILD_GUI=ON \
#     -DBUILD_WEBRTC=ON \
#     -DBUILD_WEBRTC_FROM_SOURCE=OFF \
#     -DCMAKE_C_COMPILER=gcc \
#     -DCMAKE_CXX_COMPILER=g++ \
#     -DUSE_SYSTEM_JPEG=ON \
#     -DBUILD_CUDA_MODULE=ON \
#     -DBUILD_COMMON_CUDA_ARCHS=ON \
#     -DCMAKE_CUDA_COMPILER:PATH=/usr/local/cuda/bin/nvcc \
#     -DBUILD_ISPC_MODULE=ON \
#     -DCMAKE_ISPC_COMPILER:PATH=/usr/local/ispc/bin/ispc \
#     -DGLIBCXX_USE_CXX11_ABI=ON \
#     -DBUILD_FILAMENT_FROM_SOURCE=ON \
#     #-DBUILD_TENSORFLOW_OPS=ON \
#     #-DBUILD_PYTORCH_OPS=ON \
#     #-DOPEN3D_ML_ROOT=${OPEN3D_ML_ROOT} \
#     #-DBUNDLE_OPEN3D_ML=ON \
#     -DBUILD_JUPYTER_EXTENSION=ON \
#     -DBUILD_PYTHON_MODULE=ON \
#     #-DBUILD_LIBREALSENSE=ON \
#     -DCMAKE_INSTALL_PREFIX=~/open3d_install \
#     .. \
#  && make -j$(nproc) \
 && make install-pip-package -j$(nproc) \
 && make install -j$(nproc) \
 && pyenv rehash
WORKDIR /root/Open3D
RUN cp build/lib/python_package/pip_package/*.whl /

# Compress ccache folder, move to / directory (optional)
RUN ccache -s \
 && CCACHE_DIR=$(ccache -p | grep "cache_dir =" | grep -oE "[^ ]+$") \
 && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \
 && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \
 && cd ${CCACHE_DIR_PARENT} \
 && tar -czf ${CCACHE_TAR_NAME}.tar.gz ${CCACHE_DIR_NAME} \
 && mv ${CCACHE_TAR_NAME}.tar.gz /
